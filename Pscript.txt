--I++
extends #Normal cc::standard[@applepie]

@reference @linux var::str
str[] = "Hello, World"

func main():
	print(str)

func addOne(var::one;=*):
	var::i = 0
	for (str[i], i::5):
		if (i != EOL::&)
			i++

--Reference something and using property
@extends #Normal cc:standard[@applepie]

@reference @t @wready[var] button::get(OBJECT_PATH)
var is_pressed::false

func main():
	button.press = is_pressed
	if (!is_pressed)
		button.pressed::false
	unif (is_pressed)
		button.pressed::true

--Print Something
@extends #Normal cc:standard[@applepie]

func imide();;func main():
	print("Hello, World")

--Move Character
@extends #Normal cc:standard[@applepie]

@reference @wready[var] player::get(OBJECT_PATH)
var gravity::@reference @engine["default_gravity"]
var speed::50
var jump_height::-40
var mouse_sensitivity = 0.002
var velocity::@reference @engine[velocity]

func input():
	if keyboard.press("a");;velocity.x -= speed
	unif keyboard.press("d");;velocity.x += speed

	if keyboard.press("w");;velocity.z -= speed
	unif keyboard.press("s");;velocity.z += speed

	if keyboard.press("space")&&@reference(@t;;is_on_floor)
		velocity.y = jump_height

func physics(@reference @engine[delta]):
	velocity.y += -gravity * delta
	input()
	@reference(@engine[move_and_slide])

--List of all references with PScript
extends
	#All
	#Normal
	#Custom

cc
	standard
	[classed custom compiler]
	
standard[]
	@(any compiler)

variables
	int
	float
	string
	booleans
	null[free]
	StringName
	ObjectPath

vector-types
	Vector2
	Vector3
	To_Basis

spes-types
	Color
	Resource
	Object
	Array

keyword
	if
	unif
	else
	for
	while
	match
	when
	break
	continue
	pass
	return
	in
	as
	self
	signal
	func
	static
	const
	enum
	var
	void
	await
	assert
	breakpoint
	pointish
	null

sign
	+
	-
	*
	/
	\
	;
	:
	.
	,
	[]
	()
	{./}
	&
	#
	@
	!
	?
	<.>
	::
	;.
	;;
	""
	''
	==
	=

functions
	main
	physic
	proc
	init
	imide
	notify
	input
	exput

scopes
	abs
	absf
	absi
	acos
	byte
	clamp
	clampf
	deg_to_rad
	error_commit
	floor
	lerp
	lerp_with_angle
	lerpf
	logj
	max
	maxf
	min
	minf
	print
	push_out_to_warning
	randf
	randf_range
	roundup
	roundup{format}
	sin
	sign
	sign{format}
	smooth
	snap_up
	snap_fac
	sqrt
	str()
	tna_tan{angle::\\}
	wrap
	wrapf

Annotations
	@t
	@wready
	@export[@reference]
	@export_categoryf
	@export_custom
	@iconography
	@modify_rpc
	@tool
	@reference
	@linux
	@windows
	@mac
	@linux_windows_mac
